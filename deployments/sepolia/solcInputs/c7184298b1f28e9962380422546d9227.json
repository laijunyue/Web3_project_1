{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n//1.创建一个发款函数\n//2.记录投资人并且查看\n//3.在锁定期内达到目标值，生产商可以取款并开始项目\n//4.在锁定期内没有达到目标值，投资者可以退款  //当在锁定期内达到众筹的目标值后，生产商取款并生产出商品，之后投资者便可通过凭证去取商品\n\ncontract FundMe {\n\n    //1.创建一个发款函数 payable关键字\n    //2.记录投资人并且查看  地址address&&金额value\n    mapping(address => uint256) public funderToAmount;\n\n    //设置投资的最小额度\n    uint256 constant MINIMUM_VALUE = 1 * 10**18; //ether -> wei   USD 预言机:一个ETH值多少钱,获取链下的数据\n\n    AggregatorV3Interface internal dataFeed;//合约类型\n\n    //只有owner才能取款\n    address public owner;\n\n    //设置锁定期\n    uint256 deploymentTimestamp;   //合约部署时间 时间戳\n    uint256 lockTime;   //锁定期 单位：秒\n\n    address erc20Addr; //ERC20合约地址\n\n    bool public getFundSuccess = false;   //记录取款状态\n\n    //构造函数：在合约初始化时被调用且之后不会被调用\n    constructor(uint256 _lockTime, address dataFeedAddr) {\n        //sepolia testnet\n        dataFeed = AggregatorV3Interface(dataFeedAddr);  //sepolia testnet的地址: 0x694AA1769357215DE4FAC081bf1f309aDC325306\n        owner = msg.sender;   //msg代表当前交易\n        deploymentTimestamp = block.timestamp;   //当前区块的时间戳 constructor调用的时间戳   //block代表当前区块\n        lockTime = _lockTime;\n    }\n\n    function fund() external payable {\n        require(block.timestamp < deploymentTimestamp + lockTime, \"Timeout!\");  //设置锁定期\n        require(convertEthToUsd(msg.value) >= MINIMUM_VALUE, \"Send more ETH\");  //当msg.value >= MINIMUM_VALUE不满足条件则退回\n        funderToAmount[msg.sender] = msg.value;\n    }\n\n    function setFunderToAmount(address funder, uint256 amountToUpdate) external {\n        require(msg.sender == erc20Addr, \"You do not have permission to call this function!\");\n        funderToAmount[funder] = amountToUpdate;\n    }\n\n    function setErc20Addr(address _erc20Addr) public onlyOwner {\n        erc20Addr = _erc20Addr;\n    }\n\n    //预言机\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n    // prettier-ignore\n    (\n        /* uint80 roundID */,\n        int answer,\n        /*uint startedAt*/,\n        /*uint timeStamp*/,\n        /*uint80 answeredInRound*/\n    ) = dataFeed.latestRoundData();\n    return answer; //得到一个ETH对应的USD的价格\n    }\n\n    //价格转换ETH->USD\n    function convertEthToUsd(uint256 ethAmount) internal view returns(uint256) {\n        //ETH数量×ETH的价格\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        //ETH / USD = 10**8     ETH / Wei = 10**18\n        return (ethAmount * ethPrice) / (10 ** 8);\n        //1ETH -> 20 (10^8)USD -(/10 ** 8)-> 20 USD  -> 20*10^18 Wei\n\n    }\n\n    //在锁定期内达到目标值，生产商可以取款\n    uint256 constant TARGET = 100 * 10**18;   //目标值 常量 USD\n\n    //改变owner\n    function transferOwnership(address newOwner) public onlyOwner{\n        //require(msg.sender == owner, \"This function can only be called by owner!\");\n        owner = newOwner;\n    }\n\n    //只有owner才能取款\n    function getFund() external notTime onlyOwner{\n        //用修改器实现重复操作\n        //require(block.timestamp >= deploymentTimestamp + lockTime, \"It is not the right time yet!\");  //设置锁定期\n        require(convertEthToUsd(address(this).balance/*单位:Wei*/) >= TARGET ,\"Target is not enough!\");  //this指当前合约 .balance指当前合约的存款\n        //require(msg.sender == owner, \"This function can only be called by owner!\");\n        // transfer: transfer ETH and revert if tx failed\n        payable(msg.sender).transfer(address(this).balance);\n        funderToAmount[msg.sender] = 0;   //取款后不能再退款\n        getFundSuccess = true;   //表示已取款，可以继续通证交易\n\n        // send: transfer ETH and return false if failed or return true\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success, \"Tx failed!\");\n\n        // call: transfer ETH (with data) return value of function and bool\n        // bool success;\n        // (success, /*func_result*/) = payable(msg.sender).call{value: address(this).balance}(\"\");   // (\"\")函数的入参  func_result函数返回结果\n        // require(success, \"Transfer tx failed!\");\n\n    }\n\n    //修改器\n    modifier onlyOwner(){\n        require(msg.sender == owner, \"This function can only be called by owner!\");\n        _;\n    }\n\n    //资金不足就退款 \n    function reFund() external notTime {\n        //用修改器实现重复操作   先执行修改器里的require，在执行其他操作\n        //require(block.timestamp >= deploymentTimestamp + lockTime, \"It is not the right time yet!\");  //设置锁定期\n        require(convertEthToUsd(address(this).balance/*单位:Wei*/) < TARGET ,\"Target is enough!\");\n        require(funderToAmount[msg.sender] != 0, \"There is no fund for you!\");  //投资者是否有投资\n        bool success;\n        (success, /*func_result*/) = payable(msg.sender).call{value: funderToAmount[msg.sender]}(\"\");   // (\"\")函数的入参\n        require(success, \"Transfer tx failed!\");\n        funderToAmount[msg.sender] = 0;   //退款后不能再继续退款\n\n    }\n\n    //修改器\n    modifier notTime(){\n        require(block.timestamp >= deploymentTimestamp + lockTime, \"It is not the right time yet!\");  //设置锁定期\n        _;   //函数其他操作\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}